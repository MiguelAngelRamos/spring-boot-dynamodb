package com.easy2excel.springbootawsdynamodbcrud.entity;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import lombok.Data;

@DynamoDBTable(tableName = "products")
// Especifica el nombre de la tabla de DynamoDB a la que esta clase está mapeada.
// Es importante crear la tabla en DynamoDB de antemano, ya que DynamoDB no crea
// automáticamente las tablas.

@Data
// Lombok @Data genera automáticamente getters, setters, equals, hashCode y toString
// para esta clase, simplificando el código.

public class Product {

    @DynamoDBHashKey(attributeName = "id")
    // Marca esta propiedad como la clave de partición (hash key) para la clase modelada.
    // La anotación 'attributeName' especifica el nombre del atributo en la tabla DynamoDB.

    @DynamoDBAutoGeneratedKey
    // Indica que el valor de la clave de partición se generará automáticamente.
    // Esta característica solo es compatible con tipos de datos String.

    private String id;

    @DynamoDBAttribute(attributeName = "name")
    // Mapea esta propiedad con un atributo en la tabla de DynamoDB.
    // 'attributeName' especifica el nombre del atributo en la tabla DynamoDB.
    private String productName;

    @DynamoDBAttribute(attributeName = "category")
    // Mapea la propiedad 'category' con el atributo correspondiente en DynamoDB.
    private String category;

    @DynamoDBAttribute(attributeName = "price")
    // Mapea la propiedad 'price' con el atributo correspondiente en DynamoDB.
    // Aquí se está utilizando un tipo de dato primitivo 'float'.
    private float price;

    // Consideraciones adicionales:
    // - Es importante asegurarse de que los nombres de los atributos en DynamoDB
    //   coincidan con los especificados en las anotaciones.
    // - La clase debe tener un constructor vacío, ya que es requerido por el
    //   mapeador de DynamoDB para instanciar objetos.
}
